#!/usr/bin/env bash
# Copyright (C) oxidio. See LICENSE file for license details.
# shellcheck source=.

function includeFunctions() {
    # https://stackoverflow.com/a/246128/3263617
    local dir source
    source="${BASH_SOURCE[0]}"
    while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
        dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
        source="$(readlink "$source")"
        # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
        [[ $source != /* ]] && source="$dir/$source"
    done
    dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
    . "$dir/../src/functions.sh"
}

function main() {
    local i resetCache reset projectLinks autoload links conf plugins
    local base=$PWD args='--no-suggest' env=prod action=install
    [[ -f "$base/.env" ]] && . "$base/.env"

    # https://stackoverflow.com/a/14203146/3263617
    for i in "$@"; do
        case $i in
        --env=*)
            env="${i#*=}"
            shift
        ;;
        --links)
            links=YES
            shift
        ;;
        --project-links=*)
            projectLinks="${i#*=}"
            shift
        ;;
        --conf)
            conf=YES
            shift
        ;;
        --plugins)
            plugins=YES
            shift
        ;;
        --no-install)
            action=
            shift
        ;;
        --reset)
            reset=YES
            shift
        ;;
        --reset-cache)
            resetCache=YES
            shift
        ;;
        update)
            action=update
            shift
        ;;
        --autoload=*)
            autoload="dump-autoload ${i#*=}"
            shift
        ;;
        --autoload)
            autoload="dump-autoload"
            shift
        ;;
        *)
        ;;
        esac
    done

    export COMPOSER_ALLOW_XDEBUG=0
    export COMPOSER_MEMORY_LIMIT=-1

    [[ -n "$reset" ]] && oxidioBackup "$base/source"

    [[ -d ${base}/source/ ]] || {
        autoload=dump-autoload
        plugins=YES
        links=YES
        conf=YES
    }

    [[ -x ${base}/vendor/bin/oxidio-install ]] || {
        plugins=YES
        autoload=dump-autoload
    }

    local composer=composer.json
    if [[ $env != 'prod' ]]; then
        composer=$(composerEnv --env="$env" "$@")
        echo -e "\e[92m@$env\e[0m -> $composer"
    else
        echo -e "\e[92m@prod\e[0m"
        args+=' --no-dev --prefer-dist'
        [[ -n "$autoload" ]] && autoload+=" --optimize --classmap-authoritative"
    fi

    [[ -n "$action" ]] && {
        COMPOSER="$composer" composer $action --no-plugins --no-scripts --no-autoloader $args
    }

    [[ -n "$autoload" ]] && COMPOSER="$composer" composer $autoload
    [[ -n "$plugins" ]] && COMPOSER="$composer" composer run-script post-install-cmd
    [[ -n "$plugins" ]] && COMPOSER="$composer" composer run-script post-update-cmd

    [[ -n "$resetCache" ]] && {
        oxidioBackup "$base/source/tmp/smarty/"
        oxidioBackup "$base/source/tmp/container_cache.php"
    }

    [[ -n "$links" ]] && {
        oxidioCreateSourceLinks
        [[ -n "$projectLinks" ]] && $projectLinks
    }

    [[ -n "$conf" ]] && {
        oxidioCreateConfigIncPhp
        [[ -z ${DB_STATE} ]] || chmod 444 "$base"/source/config.inc.php
        [[ -z ${DB_STATE} ]] || rm -rf "$base/source/Setup"
    }
}

includeFunctions
main "$@"
